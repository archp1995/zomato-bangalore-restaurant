# -*- coding: utf-8 -*-
"""zomato-bangalore-restaurants.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CdJsfJfYG7PENA-mOvhWbiZuMCPfRW1Q
"""

import kagglehub
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from wordcloud import WordCloud
from collections import Counter

path = kagglehub.dataset_download("himanshupoddar/zomato-bangalore-restaurants")
df = pd.read_csv(path + '/zomato.csv', delimiter=',')

print("Dataset Info:")
print(df.info())
print("\nFirst 5 rows:")
print(df.head())

print("\nMissing Values:")
print(df.isnull().sum())

df.drop(columns=['url', 'reviews_list', 'menu_item'], inplace=True)

df['rate'] = df['rate'].str.split('/').str[0]  # Extract numeric ratings
df['rate'] = pd.to_numeric(df['rate'], errors='coerce')  # Convert to numeric
df['approx_cost(for two people)'] = df['approx_cost(for two people)'].str.replace(',', '').astype(float)

df['rate'].fillna(df['rate'].median(), inplace=True)
df['approx_cost(for two people)'].fillna(df['approx_cost(for two people)'].median(), inplace=True)
df['dish_liked'].fillna('Unknown', inplace=True)

print("\nSummary Statistics:")
print(df.describe())

# Distribution of Ratings
plt.figure(figsize=(8, 6))
sns.histplot(df['rate'], bins=10, kde=True, color='blue')
plt.title('Distribution of Restaurant Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

order_table_counts = df.groupby(['online_order', 'book_table']).size().unstack()

order_table_counts.plot(kind='bar', stacked=True, figsize=(10, 6), color=['skyblue', 'orange'])
plt.title('Online Order vs Table Booking Availability')
plt.xlabel('Online Order')
plt.ylabel('Count of Restaurants')
plt.legend(title='Book Table')
plt.show()

cuisines = df['cuisines'].str.split(', ').explode()
cuisine_counts = cuisines.value_counts()

plt.figure(figsize=(10, 6))
cuisine_counts.head(10).plot(kind='bar', color='green')
plt.title('Top 10 Cuisines')
plt.xlabel('Cuisine')
plt.ylabel('Frequency')
plt.show()

#Cost Distribution
plt.figure(figsize=(8, 6))
sns.boxplot(x='online_order', y='approx_cost(for two people)', data=df, palette='Set2')
plt.title('Cost Distribution for Online Orders')
plt.xlabel('Online Order')
plt.ylabel('Cost (for two people)')
plt.show()

#  Word Cloud of Dishes Liked
dish_text = ' '.join(df['dish_liked'].dropna())
wordcloud = WordCloud(background_color='white', width=800, height=400).generate(dish_text)
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Popular Dishes Liked')
plt.show()

#Location-wise Restaurant Count
location_counts = df['location'].value_counts()

plt.figure(figsize=(12, 6))
location_counts.head(10).plot(kind='bar', color='purple')
plt.title('Top 10 Locations with Most Restaurants')
plt.xlabel('Location')
plt.ylabel('Number of Restaurants')
plt.show()

#Correlation Analysis
corr_matrix = df[['rate', 'votes', 'approx_cost(for two people)']].corr()
print("\nCorrelation Matrix:")
print(corr_matrix)
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

#Popular Dishes per Cuisine
cuisine_dish = df.groupby('cuisines')['dish_liked'].apply(lambda x: ', '.join(x)).reset_index()
print("\nPopular Dishes by Cuisine:")
print(cuisine_dish.head())

#Votes vs. Ratings
plt.figure(figsize=(10, 6))
sns.scatterplot(x='votes', y='rate', data=df, hue='online_order', palette='Set1')
plt.title('Votes vs Ratings')
plt.xlabel('Votes')
plt.ylabel('Rating')
plt.show()

#  Impact of Booking Table on Ratings
plt.figure(figsize=(8, 6))
sns.boxplot(x='book_table', y='rate', data=df, palette='muted')
plt.title('Impact of Table Booking on Ratings')
plt.xlabel('Book Table')
plt.ylabel('Rating')
plt.show()

#  Restaurants by Type
rest_type_counts = df['rest_type'].str.split(', ').explode().value_counts()

plt.figure(figsize=(12, 6))
rest_type_counts.head(10).plot(kind='bar', color='teal')
plt.title('Top 10 Restaurant Types')
plt.xlabel('Restaurant Type')
plt.ylabel('Count')
plt.show()

# Save clean dataset
df.to_csv('cleaned_zomato_data.csv', index=False)
print("Cleaned dataset saved as 'cleaned_zomato_data.csv'")